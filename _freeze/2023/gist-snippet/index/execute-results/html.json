{
  "hash": "f18ef95a63f5d0a65e5fc9f151ff943c",
  "result": {
    "markdown": "---\ntitle: \"Easily re-using self-written functions: the power of gist + code snippet duo\"\ndescription-meta: \"{{< meta website.description >}}\"\ndate: \"2023-01-03\"\nimage: teaser.png\ncategories: [r, rstudio, tip]\n---\n\n\n\n\n***\n\nQuite often data processing or analysis needs bring us to write own functions. Sometimes these self-defined functions are only meaningful and useful within a certain workflow or even a certain script. But other self-written functions may be more generic and reusable in other circumstances. For example, one may want to have a version of `ggsave()` that always enforces `bg = 'snow'`, or a `theme_own()` function with pre-saved preferences. Self-written functions live in `{.GlobalEnv}` and have to be re-defined in every new R session. Copying the same lines of code across projects can be boring. **How to \"bookmark\" the useful little own functions and reuse them easier in other projects?** This post offers an elegant solution.\n\nOne obvious way to store self-written functions would be to write an own package and have a easy access to these function via `library()` calls. While this may be quite comfortable for own coding purposes, the objective downside of this approach is replicability of the code -- once the code leaves your specific machine, one would have to install your package in order to run the code. This seems an overkill to store a couple of occasional arbitrarily useful functions. \n\nI suggest a more convenient approach: store the functions as [GitHub gists][gists] and call them using the handy `devtools::source_gist()`. This allows to load self-written functions from standalone R scripts. And to avoid copying manually the lines of code that source a certain gist we may use code snippets. Let me give you an example.\n\nI want to re-use a `ggplot2` theme with certain preferred parameters. Here are the lines of code that define my `theme_ik()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_ik <- function(\n        base_size = 12,\n        base_family = \"sans\",\n        labs_color = \"#074949\",\n        axis_color = \"#002F2F\",\n        bg_color = \"#eeffff\",\n        grid_color = \"#ccffff\"\n){\n    theme_minimal(base_size = base_size, base_family = base_family)+\n        theme(\n            plot.title = element_text(size = base_size*2, face = 2, color = labs_color),\n            plot.subtitle = element_text(color = labs_color),\n            plot.caption = element_text(color = labs_color),\n            axis.title = element_text(color = axis_color),\n            axis.text = element_text(color = axis_color),\n            plot.background = element_rect(color = NA, fill = bg_color),\n            legend.position = \"bottom\",\n            panel.spacing = unit(1, \"lines\"),\n            panel.grid.major = element_line(color = grid_color),\n            panel.grid.minor = element_blank(),\n            line = element_line(lineend = \"round\")\n        )\n}\n```\n:::\n\n\nI store these lines of R code as [a gist][gist] here. Next, I only need to supply the ID part of the gist URL (`https://gist.github.com/ikashnitsky/653e1040a07364ae82b1bb312501a184`) to the `devtools::source_gist()` function and it will execute the script stored in the gist, which will result in function `theme_ik()` appearing in my `{.GlobalEnv}`. With the second line of code I set the default `ggplot2` theme to my self-written one. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::source_gist(\"653e1040a07364ae82b1bb312501a184\")\ntheme_set(theme_ik())\n```\n:::\n\n\nNow, the final element of this recipe is to save the two lines above as a code snippet. I'm using RStudio, but code snippets are available in any decent IDE. To add a custom snippet we need to navigate to `Tools --> Edit Code Snippets...`. In the new window just add a custom snippet making sure to respect the indentation. [^1]  \n\n[![](snippet.png)](https://ikashnitsky.github.io/2023/gist-snippet/snippet.png)  \n\nThat's it. Save the modified snippets, the new one is ready to be used. Now, when I type `thm` and then press `TAB`, `thm` transforms into the two lines of code that source the specific gist and set the custom theme to `theme_ik()`. Any ggplot that I will produce next in this R session will have my preferred theme defaults.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nswiss %>% \n        ggplot(aes(x = Agriculture, y = Fertility))+\n        geom_point()+\n        labs(\n            title = \"Fertility and rurality in Swiss cantones, 1888\"\n        )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=768}\n:::\n:::\n\n\n\nMy preferred `ggplot2` theme here is optimized to produce plots that look nicely in my blog. [^2] \n**Happy coding with snippets and easily re-usable custom functions!** \n\n\n***\n\n[^1]: Note that in the left tabset one can choose what kind of snippets to add. In R scripts snippets are called with `TAB`, in rmarkdown documents the hot-key for snippets is `SHIFT+TAB`. \n[^2]: In case you read this anywhere else, this blog post is available at [https://ikashnitsky.github.io/2023/gist-snippet][post]\n\n[gists]: https://gist.github.com\n[gist]: https://gist.github.com/ikashnitsky/653e1040a07364ae82b1bb312501a184\n[post]: https://ikashnitsky.github.io/2023/gist-snippet\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}