{
  "hash": "c5bd18b565665b155acff9d2853a42fb",
  "result": {
    "markdown": "---\ntitle: \"The easiest way to radically improve map aesthetics\"\ndescription-meta: \"{{< meta website.description >}}\"\ndate: \"2023-01-01\"\nimage: teaser.png\ncategories: [r, rspatial, dataviz, hack]\n---\n\n\n\n\n***\n\nSince R community developed brilliant tools to deal with spatial data, producing maps is no longer the privilege of a narrow group of people with very specific almost esoteric knowledge, skillset, and often super expensive software. With `#rspatial` packages, maps (at least the relatively simple ones) became just another type of dataviz. \n\n[![](rgg-maps.png)](https://ikashnitsky.github.io/2023/map-borders/rgg-maps.png)  \n\nJust a few lines of code can reveal the eye-catching and visually pleasant spatial dimension of the data. Similarly, a few more lines of code can radically improve the pleasantness of a simple map -- just **add borders as lines in a separate spatial layer**. \n\n[![](sketch.png)](https://ikashnitsky.github.io/2023/map-borders/sketch.png){.preview-image}   \n    \nAn often \"quick and dirty\" solution when composing a simple choropleth map is to use polygons outline as the borders. While this works okay to distinguish the polygons, the map quickly becomes unnecessarily overloaded. All the non-bordering outlines -- complicated coastal lines and islands' outlines -- look ugly and add nothing to the map. \n\nLet's illustrate the ease of this trick mapping Greece with its numerous small islands. We'll use the beautiful `eurostat` package that has a built in spatial dataset with NUTS-3 regions of Europe. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(cowplot)\n\nset.seed(911)\n\n# subset Greence, NUTS-3 regions\nlibrary(eurostat)\ngreece <- eurostat_geodata_60_2016 %>% \n    filter(LEVL_CODE==3,\n           str_sub(geo, 1, 2) == \"EL\") %>% \n    # create random values for filling the polygons\n    mutate(random = runif(length(id))) %>% \n    select(id, geometry, random) %>% \n    st_transform(crs = 3035)\n```\n:::\n\n\n\nFirst, here's the typical lazy (or rather no-brainer) way of using the polygons' outlines to show the borders between our spatial units.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot with polygon outlines\ngreece %>% \n    ggplot()+\n    geom_sf(aes(fill = random), color = 2, size = 1)+\n    labs(title = \"Polygons outlined\")+\n    scale_fill_viridis_c(begin = .5)+\n    theme_map()+\n    theme(plot.background = element_rect(color = NA, fill = \"#eeffff\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\ngg_outline <- last_plot()\n```\n:::\n\n\nLook at all the islands, especially the small ones -- what are all these red outlines for? Insted, we can add only the borders between the polygons as lines. For this we need to add another geospatial layer with lines. Where do we get it? This is extremely easy to produce thanks to the marvelous little package `rmapshaper` that has  a function `ms_innerlines()` exactly for the task. [^1] \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# produce border lines with rmapshaper::ms_innerlines()\nlibrary(rmapshaper)\nbord <- greece %>% ms_innerlines()\n```\n:::\n\n\n\nNow, let's plot the same map with proper borders between the polygons. Note that for the `sf` layer with polygons I set `color = NA` to get rid of the polygons outline. Then with the next call to `geom_sf()` I draw the line borders as a separate layer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# now plot without polygon outlines and with borders as lines\ngreece %>% \n    ggplot()+\n    geom_sf(aes(fill = random), color = NA)+\n    geom_sf(data = bord, color = 2, size = 1)+\n    labs(title = \"Borders as lines\")+\n    scale_fill_viridis_c(begin = .5)+\n    theme_map()+\n    theme(plot.background = element_rect(color = NA, fill = \"#eeffff\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\ngg_bord <- last_plot()\n```\n:::\n\n\n\nThat's it! This is the simplest dataviz trick I know that can radically improve the outlook of simple choropleth maps. It's only one additional line of code. You can even create the borders `sf` object on the fly within the `ggplot` map creation code specifying the `data` parameter as `. %>% ms_innerlines()`, like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeom_sf(data = . %>% ms_innerlines(), color = 2, size = 1)\n```\n:::\n\n\nFinally, let's put the two maps side by side.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# put side by side\nlibrary(patchwork)\n(\n    gg_outline + gg_bord \n)  + \n    plot_layout(guides = \"collect\")+\n    plot_annotation(\n        caption = \"! Look at the islands\", \n        theme = theme(plot.background = element_rect(color = NA, fill = \"#eeffff\"))\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=100%}\n:::\n:::\n\n\n\n\n***\n\n::: {.callout-tip}\n# Replicate this analysis using the `R` code from this [gist][gist]. This post is partially based on my previous [Twitter thread][thread]\n:::\n\n::: {.callout-note}\n# About this post\nPublishing this post is my personal gestalt closure -- it spent more than three years in planning and then in drafts. Somehow, with this post I hit the wall of writer's block and it coincided with Twitter threads substituting blogging for me. Now, it's time to get back to blogging. \n:::\n\n\n[^1]: Before I found `rmapshaper` the task seemed overly complicated, I even asked [Stack Overflow][so]\n\n\n[so]: https://stackoverflow.com/questions/47760033\n[thread]: https://twitter.com/ikashnitsky/status/1247875600305598464\n[gist]: https://gist.github.com/ikashnitsky/cf2c29a29d39f79bb1c857a4fefc2cd4\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}