{
  "hash": "44250eb3a8d2676b9d6367f903d8cb8d",
  "result": {
    "markdown": "---\ntitle: \"Arranging subplots with ggplot2\"\ndescription-meta: \"{{< meta website.description >}}\"\ndate: \"2017-05-22\"\nimage: teaser.png\ncategories: [r, ggplot2]\n---\n\n\n***\n\n\nFor [my recently published paper][gen], I produced not-so-standard figures that show the two step decomposition used in the analysis. Have a look: \n\n![](fig-01.png)\n**Figure 3 from my paper ([PDF][pdf])**\n\nActually, `ggplot2` is a very powerful and flexible tool that allows to draw figures with quite a complex layout. Today I want to show the code that aligns six square plots (actually, maps) just as in the figure above. And it's all about the handy function `ggplot2::annotation_custom()`. Since I used the layout more than once, I wrapped the code that produced it into a function that takes a list of 6 square plots as an input and yields the arranged figure with arrows as an output. Here is the commented code of the function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nalign_six_plots <- function(list.plots, \n                                    family = \"\",\n                                    labels=LETTERS[1:6], \n                                    labels.size=8){\n\n        require(tidyverse)\n        require(gridExtra)\n\n        gg <- ggplot()+\n                coord_equal(xlim = c(0, 21), ylim = c(0, 30), expand = c(0,0))+\n\n                annotation_custom(ggplotGrob(list.plots[[1]]),\n                                  xmin = 0.5, xmax = 8.5, ymin = 21, ymax = 29)+\n\n                annotation_custom(ggplotGrob(list.plots[[2]]),\n                                  xmin = 12.5, xmax = 20.5, ymin = 19.5, ymax = 27.5)+\n                annotation_custom(ggplotGrob(list.plots[[3]]),\n                                  xmin = 12.5,xmax = 20.5,ymin = 10.5,ymax = 18.5)+\n\n                annotation_custom(ggplotGrob(list.plots[[4]]),\n                                  xmin = 0.5, xmax = 8.5, ymin = 9,ymax = 17)+\n                annotation_custom(ggplotGrob(list.plots[[5]]),\n                                  xmin = 0.5, xmax = 8.5, ymin = 0, ymax = 8)+\n                annotation_custom(ggplotGrob(list.plots[[6]]),\n                                  xmin = 12.5,xmax = 20.5, ymin = 0, ymax = 8)+\n\n                labs(x = NULL, y = NULL)+\n                theme_void()\n\n        # DF with the coordinates of the 5 arrows\n        df.arrows <- data.frame(id=1:5,\n                                x=c(8.5,8.5,12.5,12.5,12.5),\n                                y=c(21,21,10.5,10.5,10.5),\n                                xend=c(12.5,12.5,8.5,8.5,12.5),\n                                yend=c(20.5,17.5,10,7,7))\n\n        # add arrows\n        gg <- gg +\n                geom_curve(data = df.arrows |> filter(id==1),\n                           aes(x=x,y=y,xend=xend,yend=yend),\n                           curvature = 0.1,\n                           arrow = arrow(type=\"closed\",length = unit(0.25,\"cm\"))) +\n                geom_curve(data = df.arrows |> filter(id==2),\n                           aes(x=x,y=y,xend=xend,yend=yend),\n                           curvature = -0.1,\n                           arrow = arrow(type=\"closed\",length = unit(0.25,\"cm\"))) +\n                geom_curve(data = df.arrows |> filter(id==3),\n                           aes(x=x,y=y,xend=xend,yend=yend),\n                           curvature = -0.15,\n                           arrow = arrow(type=\"closed\",length = unit(0.25,\"cm\"))) +\n                geom_curve(data = df.arrows |> filter(id==4),\n                           aes(x=x,y=y,xend=xend,yend=yend),\n                           curvature = 0,\n                           arrow = arrow(type=\"closed\",length = unit(0.25,\"cm\"))) +\n                geom_curve(data = df.arrows |> filter(id==5),\n                           aes(x=x,y=y,xend=xend,yend=yend),\n                           curvature = 0.3,\n                           arrow = arrow(type=\"closed\",length = unit(0.25,\"cm\")))\n\n        # add labes\n        gg <- gg + annotate('text',label = labels,\n                            x=c(.5,12.5,12.5,.5,.5,12.5)+.5,\n                            y=c(29,27.5,18.5,17,8,8)+.1,\n                            size=labels.size,hjust=0, vjust=0, family = family)\n\n        return(gg)\n}\n```\n:::\n\n\nLet's check, if the function works. For that I create just a blank plot, clone it six times, store the six plots in a list, and finally feed it to the function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggthemes)\n\n# create a simple blank square plot\np <- ggplot()+\n  expand_limits(x = c(0,1), y = c(0,1))+\n  theme_map()+\n  theme(panel.border = element_rect(color = \"black\", size = 0.5, fill = NA),\n        aspect.ratio = 1)\n\n# clone this plot six times and store as a list of six\nplots <- mget(rep(\"p\", 6))\n\n# use the function on the list\nsix <- align_six_plots(plots)\n\n# save the output\nggsave(\"six_square_plots_aligned.png\", six, width=12, height=18)\n```\n:::\n\n\n![](fig-02.png)\n\nJust what we wanted to get.  \n\n***\n\n::: {.callout-tip}\n# To reproduce all the actual results and figures from [my paper][gen], have a look at this github [repo][git]\n:::\n\n\n\n\n\n[gen]: https://doi.org/10.1186/s41118-017-0018-2\n[pdf]: https://ikashnitsky.github.io/doc/pubs/1705-genus-ik.pdf\n[git]: https://github.com/ikashnitsky/genus-2017\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}