{
  "hash": "4b5cd828b2f98827fbb29ff6f7e4deb0",
  "result": {
    "markdown": "---\ntitle: \"Accelerating ggplot2: use a canvas to speed up plots creation\"\ndescription-meta: \"{{< meta website.description >}}\"\ndate: \"2017-07-04\"\nimage: teaser.png\ncategories: [r, ggplot2, speed]\n---\n\n\n***\n\n::: {.callout-important}\n# Too wrong; don't read\nBasically, this post turned out to be just a wrong, premature, and unnecessary attempt of code optimization. If you still want to have look, make sure that later you read [this post][tlp] by Thomas Lin Pedersen. You are warned\n:::\n\n\n***\n\n::: {.callout-note}\n# This post is updated on 2017-07-15\nThe earlier version had a terminology mistake [pointed out by Hadley Wickham][hadley]. I wrongly called creation time of the plots as rendering time. \n:::\n\n\nOne of the nice features of the `gg`approach to plotting is that one can save plots as R objects at any step and use later to render and/or modify. I used that feature extensively while creating maps with `ggplot2` (see my previous posts: [one][one], [two][two], [three][three], [four][four], [five][five]). It is just convenient to first create a canvas with all the theme parameters appropriate for a map, and then overlay the map layer. At some point I decided to check if that workflow was computationally efficient or not. To my surprise, the usage of canvas reduces the creation time of a ggplot quite a lot. To my further surprise, this finding holds for simple plots as well as maps.\n\nLet's start with a simple check. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load required packages\nlibrary(tidyverse)      # data manipulation and viz\nlibrary(ggthemes)       # themes for ggplot2\nlibrary(viridis)        # the best color palette\nlibrary(rgdal)          # deal with shapefiles\nlibrary(microbenchmark) # measure the speed of executing\nlibrary(extrafont)      # nice font\nmyfont <- \"Roboto Condensed\"\nlibrary(RColorBrewer)\n\n# create a canvas \ncanv_mt <- ggplot(mtcars, aes(hp, mpg, color = cyl))+\n        coord_cartesian()\n\n# test speed with mocrobenchmark\ntest <- microbenchmark(\n        without_canvas = ggplot(mtcars, aes(hp, mpg, color = cyl))+\n                coord_cartesian()+\n                geom_point()\n        \n        ,\n        \n        with_canvas = canv_mt+\n                geom_point()\n       \n        ,\n        \n        times = 100\n)\n\ntest\n\nautoplot(test)+\n        aes(fill = expr)+\n        scale_fill_viridis(discrete = T)+\n        theme_bw(base_size = 15, base_family = myfont)+\n        theme(legend.position = \"none\",\n              axis.text = element_text(size = 15))+\n        labs(title = \"The speed of creating a simple ggplot\")\n```\n:::\n\n\n![](fig-01-test-simple.png) \n**Figure 1. Microbenchmark output for a simple plot**\n\nThe median time of execution is 3.24 milliseconds for the plot **without** canvas and 2.29 milliseconds for the plot **with** canvas. \n\nNext, let's do the same check for a map. For that, I will use the data prepared for [one of my earlier posts][four] and recreate the simple map that shows the division of European Union 27 into three subregions. \n\n![](fig-02-sub.png)\n**Figure 2. The map we use to test the plot creation speed**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the already prepared data\nload(url(\"https://ikashnitsky.github.io/doc/misc/map-subplots/df-27-261-urb-rur.RData\"))\nload(url(\"https://ikashnitsky.github.io/doc/misc/map-subplots/spatial-27-261.RData\"))\n\n# fortify spatial objects\nneib <- fortify(Sneighbors)\nbord <- fortify(Sborders)\nfort <- fortify(Sn2, region = \"id\")\n\n# join spatial and statistical data\nfort_map <- left_join(df, fort, \"id\")\n\n# pal for the subregions\nbrbg3 <- brewer.pal(11,\"BrBG\")[c(8,2,11)]\n\n# create a blank map\nbasemap <- ggplot()+\n        geom_polygon(data = neib,\n                     aes(x = long, y = lat, group = group),\n                     fill = \"grey90\",color = \"grey90\")+\n        coord_equal(ylim = c(1350000,5450000), \n                    xlim = c(2500000, 6600000), \n                    expand = c(0,0))+\n        theme_map(base_family = myfont)+\n        theme(panel.border = element_rect(color = \"black\",size = .5,fill = NA),\n              legend.position = c(1, 1),\n              legend.justification = c(1, 1),\n              legend.background = element_rect(colour = NA, fill = NA),\n              legend.title = element_text(size = 15),\n              legend.text = element_text(size = 15))+\n        labs(x = NULL, y = NULL)\n\n\n# test speed with mocrobenchmark\ntest_map <- microbenchmark(\n        without_canvas = \n                ggplot()+\n                geom_polygon(data = neib,\n                             aes(x = long, y = lat, group = group),\n                             fill = \"grey90\",color = \"grey90\")+\n                coord_equal(ylim = c(1350000,5450000), \n                            xlim = c(2500000, 6600000), \n                            expand = c(0,0))+\n                theme_map(base_family = myfont)+\n                theme(panel.border = element_rect(color = \"black\",\n                                                  size = .5,fill = NA),\n                      legend.position = c(1, 1),\n                      legend.justification = c(1, 1),\n                      legend.background = element_rect(colour = NA, fill = NA),\n                      legend.title = element_text(size = 15),\n                      legend.text = element_text(size = 15))+\n                labs(x = NULL, y = NULL) +\n                geom_polygon(data = fort_map, \n                             aes(x = long, y = lat, group = group, \n                                 fill = subregion), color = NA)+\n                scale_fill_manual(values = rev(brbg3)) +\n                theme(legend.position = \"none\")\n        \n        ,\n        \n        with_canvas = \n                basemap +\n                geom_polygon(data = fort_map, \n                             aes(x = long, y = lat, group = group, \n                                 fill = subregion), color = NA)+\n                scale_fill_manual(values = rev(brbg3)) +\n                theme(legend.position = \"none\")\n        \n        ,\n        \n        times = 100\n)\n      \n\nautoplot(test_map)+\n        aes(fill = expr)+\n        scale_fill_viridis(discrete = T)+\n        theme_bw(base_size = 15, base_family = myfont)+\n        theme(legend.position = \"none\",\n              axis.text = element_text(size = 15))+\n        labs(title = \"The speed of creating a map with ggplot2\")\n```\n:::\n\n\n![](fig-03-test-map.png) \n**Figure 3. Microbenchmark output for a map**\n\nThe median time of execution is 18.8 milliseconds for the map **without** canvas and 6.3 milliseconds for the map **with** canvas. \n\n## Conclusion: Use canvas with `ggplot2`\n\n***\n\n::: {.callout-tip}\n# For the full script to reproduce the results check out this [gist][gist]\n:::\n\n\n\n\n\n[tlp]: https://www.data-imaginist.com/2017/beneath-the-canvas/\n[one]: https://ikashnitsky.github.io/2017/denmark-nuts-reconstruction/\n[two]: https://ikashnitsky.github.io/2017/map-hacking/\n[three]: https://ikashnitsky.github.io/2017/align-six-maps/\n[four]: https://ikashnitsky.github.io/2017/subplots-in-maps/\n[five]: https://ikashnitsky.github.io/2017/colorcoded-map/\n[gist]: https://gist.github.com/ikashnitsky/b9c5d0b838daa2338066dbaa3e035dcc\n[hadley]: https://twitter.com/hadleywickham/status/882217871769837569\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}